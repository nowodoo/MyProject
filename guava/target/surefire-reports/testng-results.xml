<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="122" passed="122">
  <reporter-output>
  </reporter-output>
  <suite name="Command line suite" duration-ms="309" started-at="2017-05-30T13:41:19Z" finished-at="2017-05-30T13:41:20Z">
    <groups>
    </groups>
    <test name="Command line test" duration-ms="309" started-at="2017-05-30T13:41:19Z" finished-at="2017-05-30T13:41:20Z">
      <class name="pl.tomaszdziurko.guava.base.CharsetsTest">
        <test-method status="PASS" signature="shouldCreateSupportedInJavaCharset()[pri:0, instance:pl.tomaszdziurko.guava.base.CharsetsTest@6cd8737]" name="shouldCreateSupportedInJavaCharset" duration-ms="1" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCreateSupportedInJavaCharset -->
      </class> <!-- pl.tomaszdziurko.guava.base.CharsetsTest -->
      <class name="pl.tomaszdziurko.guava.collect.RangesTest">
        <test-method status="PASS" signature="shouldCheckThatAllElementAreInRange()[pri:0, instance:pl.tomaszdziurko.guava.collect.RangesTest@42d3bd8b]" name="shouldCheckThatAllElementAreInRange" duration-ms="4" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCheckThatAllElementAreInRange -->
        <test-method status="PASS" signature="shouldCheckThatRangeIsEnclosedInAnotherOne()[pri:0, instance:pl.tomaszdziurko.guava.collect.RangesTest@42d3bd8b]" name="shouldCheckThatRangeIsEnclosedInAnotherOne" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCheckThatRangeIsEnclosedInAnotherOne -->
        <test-method status="PASS" signature="shouldCheckThatElementIsInRange()[pri:0, instance:pl.tomaszdziurko.guava.collect.RangesTest@42d3bd8b]" name="shouldCheckThatElementIsInRange" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCheckThatElementIsInRange -->
        <test-method status="PASS" signature="shouldCreateRangeForGivenNumbers()[pri:0, instance:pl.tomaszdziurko.guava.collect.RangesTest@42d3bd8b]" name="shouldCreateRangeForGivenNumbers" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCreateRangeForGivenNumbers -->
        <test-method status="PASS" signature="shouldGenerateSetOfElementsInRange()[pri:0, instance:pl.tomaszdziurko.guava.collect.RangesTest@42d3bd8b]" name="shouldGenerateSetOfElementsInRange" duration-ms="4" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldGenerateSetOfElementsInRange -->
      </class> <!-- pl.tomaszdziurko.guava.collect.RangesTest -->
      <class name="pl.tomaszdziurko.guava.collect.ImmutableMapTest">
        <test-method status="PASS" signature="shouldUseMapBuilder()[pri:0, instance:pl.tomaszdziurko.guava.collect.ImmutableMapTest@26ba2a48]" name="shouldUseMapBuilder" duration-ms="2" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUseMapBuilder -->
        <test-method status="PASS" signature="shouldUseQuickMapCreator()[pri:0, instance:pl.tomaszdziurko.guava.collect.ImmutableMapTest@26ba2a48]" name="shouldUseQuickMapCreator" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUseQuickMapCreator -->
      </class> <!-- pl.tomaszdziurko.guava.collect.ImmutableMapTest -->
      <class name="pl.tomaszdziurko.guava.collect.ConstraintsTest">
        <test-method status="PASS" signature="shouldThrowExceptionOnInvalidAdd()[pri:0, instance:pl.tomaszdziurko.guava.collect.ConstraintsTest@735f7ae5]" name="shouldThrowExceptionOnInvalidAdd" duration-ms="2" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:20Z">
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
	at com.google.common.base.Preconditions.checkArgument(Preconditions.java:72)
	at pl.tomaszdziurko.guava.collect.ConstraintsTest$1.checkElement(ConstraintsTest.java:47)
	at pl.tomaszdziurko.guava.collect.ConstraintsTest$1.checkElement(ConstraintsTest.java:42)
	at com.google.common.collect.Constraints$ConstrainedList.add(Constraints.java:229)
	at pl.tomaszdziurko.guava.collect.ConstraintsTest.shouldThrowExceptionOnInvalidAdd(ConstraintsTest.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:158)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:98)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowExceptionOnInvalidAdd -->
        <test-method status="PASS" signature="shouldThrowExceptionOnNullAdd()[pri:0, instance:pl.tomaszdziurko.guava.collect.ConstraintsTest@735f7ae5]" name="shouldThrowExceptionOnNullAdd" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:187)
	at com.google.common.collect.Constraints$NotNullConstraint.checkElement(Constraints.java:50)
	at com.google.common.collect.Constraints$ConstrainedList.add(Constraints.java:229)
	at pl.tomaszdziurko.guava.collect.ConstraintsTest.shouldThrowExceptionOnNullAdd(ConstraintsTest.java:28)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:158)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:98)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowExceptionOnNullAdd -->
      </class> <!-- pl.tomaszdziurko.guava.collect.ConstraintsTest -->
      <class name="pl.tomaszdziurko.guava.base.StopwatchTest">
        <test-method status="PASS" signature="shouldCalculateIterationsTime()[pri:0, instance:pl.tomaszdziurko.guava.base.StopwatchTest@2c6a3f77]" name="shouldCalculateIterationsTime" duration-ms="73" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCalculateIterationsTime -->
        <test-method status="PASS" signature="shouldPrintIterationsTime()[pri:0, instance:pl.tomaszdziurko.guava.base.StopwatchTest@2c6a3f77]" name="shouldPrintIterationsTime" duration-ms="10" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPrintIterationsTime -->
      </class> <!-- pl.tomaszdziurko.guava.base.StopwatchTest -->
      <class name="pl.tomaszdziurko.guava.base.SplitterTest">
        <test-method status="PASS" signature="shouldSplitAndOmitEmptyElementsAndWhitespaces()[pri:0, instance:pl.tomaszdziurko.guava.base.SplitterTest@1e67b872]" name="shouldSplitAndOmitEmptyElementsAndWhitespaces" duration-ms="2" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSplitAndOmitEmptyElementsAndWhitespaces -->
        <test-method status="PASS" signature="shouldSplitForEqualLength()[pri:0, instance:pl.tomaszdziurko.guava.base.SplitterTest@1e67b872]" name="shouldSplitForEqualLength" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSplitForEqualLength -->
        <test-method status="PASS" signature="shouldSplitOnRegExp()[pri:0, instance:pl.tomaszdziurko.guava.base.SplitterTest@1e67b872]" name="shouldSplitOnRegExp" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSplitOnRegExp -->
        <test-method status="PASS" signature="shouldSplitOnSemicolons()[pri:0, instance:pl.tomaszdziurko.guava.base.SplitterTest@1e67b872]" name="shouldSplitOnSemicolons" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSplitOnSemicolons -->
        <test-method status="PASS" signature="shouldSplitUsingCharMatcher()[pri:0, instance:pl.tomaszdziurko.guava.base.SplitterTest@1e67b872]" name="shouldSplitUsingCharMatcher" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSplitUsingCharMatcher -->
      </class> <!-- pl.tomaszdziurko.guava.base.SplitterTest -->
      <class name="pl.tomaszdziurko.guava.base.JoinerTest">
        <test-method status="PASS" signature="shouldJoinMap()[pri:0, instance:pl.tomaszdziurko.guava.base.JoinerTest@77b52d12]" name="shouldJoinMap" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldJoinMap -->
        <test-method status="PASS" signature="shouldJoinWithCommas()[pri:0, instance:pl.tomaszdziurko.guava.base.JoinerTest@77b52d12]" name="shouldJoinWithCommas" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldJoinWithCommas -->
        <test-method status="PASS" signature="shouldJoinWithCommasAndOmitNulls()[pri:0, instance:pl.tomaszdziurko.guava.base.JoinerTest@77b52d12]" name="shouldJoinWithCommasAndOmitNulls" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldJoinWithCommasAndOmitNulls -->
        <test-method status="PASS" signature="shouldThrowNullPointerException()[pri:0, instance:pl.tomaszdziurko.guava.base.JoinerTest@77b52d12]" name="shouldThrowNullPointerException" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:187)
	at com.google.common.base.Joiner.toString(Joiner.java:532)
	at com.google.common.base.Joiner.appendTo(Joiner.java:124)
	at com.google.common.base.Joiner.appendTo(Joiner.java:181)
	at com.google.common.base.Joiner.join(Joiner.java:237)
	at com.google.common.base.Joiner.join(Joiner.java:226)
	at pl.tomaszdziurko.guava.base.JoinerTest.shouldThrowNullPointerException(JoinerTest.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:158)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:98)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowNullPointerException -->
        <test-method status="PASS" signature="shouldJoinWithCommasAndReplaceNullsWithWordNothing()[pri:0, instance:pl.tomaszdziurko.guava.base.JoinerTest@77b52d12]" name="shouldJoinWithCommasAndReplaceNullsWithWordNothing" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldJoinWithCommasAndReplaceNullsWithWordNothing -->
      </class> <!-- pl.tomaszdziurko.guava.base.JoinerTest -->
      <class name="pl.tomaszdziurko.guava.collect.Collections2Test">
        <test-method status="PASS" signature="changeListToMultiMap()[pri:0, instance:pl.tomaszdziurko.guava.collect.Collections2Test@62043840]" name="changeListToMultiMap" duration-ms="30" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- changeListToMultiMap -->
        <test-method status="PASS" signature="shouldFilterCountriesOnlyFromAfrica()[pri:0, instance:pl.tomaszdziurko.guava.collect.Collections2Test@62043840]" name="shouldFilterCountriesOnlyFromAfrica" duration-ms="4" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFilterCountriesOnlyFromAfrica -->
        <test-method status="PASS" signature="shouldShowThatResultIsOnlyAView()[pri:0, instance:pl.tomaszdziurko.guava.collect.Collections2Test@62043840]" name="shouldShowThatResultIsOnlyAView" duration-ms="1" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldShowThatResultIsOnlyAView -->
        <test-method status="PASS" signature="shouldTransformCollection()[pri:0, instance:pl.tomaszdziurko.guava.collect.Collections2Test@62043840]" name="shouldTransformCollection" duration-ms="1" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldTransformCollection -->
      </class> <!-- pl.tomaszdziurko.guava.collect.Collections2Test -->
      <class name="pl.tomaszdziurko.guava.base.StringsTest">
        <test-method status="PASS" signature="shouldRepeatGivenString()[pri:0, instance:pl.tomaszdziurko.guava.base.StringsTest@13fee20c]" name="shouldRepeatGivenString" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRepeatGivenString -->
        <test-method status="PASS" signature="shouldConvertNullToEmpty()[pri:0, instance:pl.tomaszdziurko.guava.base.StringsTest@13fee20c]" name="shouldConvertNullToEmpty" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertNullToEmpty -->
        <test-method status="PASS" signature="shouldPadStart()[pri:0, instance:pl.tomaszdziurko.guava.base.StringsTest@13fee20c]" name="shouldPadStart" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPadStart -->
        <test-method status="PASS" signature="shouldConvertEmptyToNull()[pri:0, instance:pl.tomaszdziurko.guava.base.StringsTest@13fee20c]" name="shouldConvertEmptyToNull" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertEmptyToNull -->
        <test-method status="PASS" signature="shouldPadEnd()[pri:0, instance:pl.tomaszdziurko.guava.base.StringsTest@13fee20c]" name="shouldPadEnd" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPadEnd -->
        <test-method status="PASS" signature="shouldReturnTrueOnNullString()[pri:0, instance:pl.tomaszdziurko.guava.base.StringsTest@13fee20c]" name="shouldReturnTrueOnNullString" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnTrueOnNullString -->
      </class> <!-- pl.tomaszdziurko.guava.base.StringsTest -->
      <class name="pl.tomaszdziurko.guava.base.CharMatcherTest">
        <test-method status="PASS" signature="shouldCountDigits()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldCountDigits" duration-ms="1" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCountDigits -->
        <test-method status="PASS" signature="shouldCollapseAllDigitsByX()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldCollapseAllDigitsByX" duration-ms="0" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCollapseAllDigitsByX -->
        <test-method status="PASS" signature="shouldMatchAny()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldMatchAny" duration-ms="1" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchAny -->
        <test-method status="PASS" signature="shouldMatchBreakingWhitespace()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldMatchBreakingWhitespace" duration-ms="0" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchBreakingWhitespace -->
        <test-method status="PASS" signature="shouldMatchChar()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldMatchChar" duration-ms="1" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchChar -->
        <test-method status="PASS" signature="shouldMatchDigits()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldMatchDigits" duration-ms="1" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchDigits -->
        <test-method status="PASS" signature="shouldMatchDigitsWithWhitespace()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldMatchDigitsWithWhitespace" duration-ms="0" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldMatchDigitsWithWhitespace -->
        <test-method status="PASS" signature="shouldNotMatchChar()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldNotMatchChar" duration-ms="1" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotMatchChar -->
        <test-method status="PASS" signature="shouldRemoveAllExceptDigitsBetween3and6()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldRemoveAllExceptDigitsBetween3and6" duration-ms="0" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRemoveAllExceptDigitsBetween3and6 -->
        <test-method status="PASS" signature="shouldRemoveDigitsBetween3and6()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldRemoveDigitsBetween3and6" duration-ms="1" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRemoveDigitsBetween3and6 -->
        <test-method status="PASS" signature="shouldRemoveOnlyStartingDollarsAndKeepOtherUnchanged()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldRemoveOnlyStartingDollarsAndKeepOtherUnchanged" duration-ms="0" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRemoveOnlyStartingDollarsAndKeepOtherUnchanged -->
        <test-method status="PASS" signature="shouldRemoveStartingAndEndingDollarsAndKeepOtherUnchanged()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldRemoveStartingAndEndingDollarsAndKeepOtherUnchanged" duration-ms="0" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRemoveStartingAndEndingDollarsAndKeepOtherUnchanged -->
        <test-method status="PASS" signature="shouldRemoveOnlyEndingDollarsAndKeepOtherUnchanged()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldRemoveOnlyEndingDollarsAndKeepOtherUnchanged" duration-ms="0" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRemoveOnlyEndingDollarsAndKeepOtherUnchanged -->
        <test-method status="PASS" signature="shouldRetainDigitsOrWhiteSpaces()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldRetainDigitsOrWhiteSpaces" duration-ms="1" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRetainDigitsOrWhiteSpaces -->
        <test-method status="PASS" signature="shouldReplaceAllDigitsByX()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldReplaceAllDigitsByX" duration-ms="0" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReplaceAllDigitsByX -->
        <test-method status="PASS" signature="shouldRemoveStartingAndEndingDollarsOrWhitespaceAndKeepOtherUnchanged()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldRemoveStartingAndEndingDollarsOrWhitespaceAndKeepOtherUnchanged" duration-ms="0" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRemoveStartingAndEndingDollarsOrWhitespaceAndKeepOtherUnchanged -->
        <test-method status="PASS" signature="shouldRemoveStartingEndEndingDollarsAndReplaceOthersWithX()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldRemoveStartingEndEndingDollarsAndReplaceOthersWithX" duration-ms="0" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRemoveStartingEndEndingDollarsAndReplaceOthersWithX -->
        <test-method status="PASS" signature="shouldRetainLettersAndDigits()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldRetainLettersAndDigits" duration-ms="0" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRetainLettersAndDigits -->
        <test-method status="PASS" signature="shouldRetainNothingAsConstrainsAreExcluding()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldRetainNothingAsConstrainsAreExcluding" duration-ms="0" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRetainNothingAsConstrainsAreExcluding -->
        <test-method status="PASS" signature="shouldReturnFirstIndexOfFirstWhitespace()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldReturnFirstIndexOfFirstWhitespace" duration-ms="0" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnFirstIndexOfFirstWhitespace -->
        <test-method status="PASS" signature="shouldRetainOnlyDigits()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldRetainOnlyDigits" duration-ms="0" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRetainOnlyDigits -->
        <test-method status="PASS" signature="shouldReturnLastIndexOfFirstWhitespace()[pri:0, instance:pl.tomaszdziurko.guava.base.CharMatcherTest@3f2a3a5]" name="shouldReturnLastIndexOfFirstWhitespace" duration-ms="0" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnLastIndexOfFirstWhitespace -->
      </class> <!-- pl.tomaszdziurko.guava.base.CharMatcherTest -->
      <class name="pl.tomaszdziurko.guava.collect.ForwardingListTest">
        <test-method status="PASS" signature="shouldAddOppositeNumber()[pri:0, instance:pl.tomaszdziurko.guava.collect.ForwardingListTest@3b81a1bc]" name="shouldAddOppositeNumber" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAddOppositeNumber -->
      </class> <!-- pl.tomaszdziurko.guava.collect.ForwardingListTest -->
      <class name="pl.tomaszdziurko.guava.base.ObjectsTest">
        <test-method status="PASS" signature="shouldShowHowToStringMethodWorks()[pri:0, instance:pl.tomaszdziurko.guava.base.ObjectsTest@2ef9b8bc]" name="shouldShowHowToStringMethodWorks" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldShowHowToStringMethodWorks -->
        <test-method status="PASS" signature="shouldRenderNameAsDisplayableName()[pri:0, instance:pl.tomaszdziurko.guava.base.ObjectsTest@2ef9b8bc]" name="shouldRenderNameAsDisplayableName" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRenderNameAsDisplayableName -->
        <test-method status="PASS" signature="shouldTestHashcode()[pri:0, instance:pl.tomaszdziurko.guava.base.ObjectsTest@2ef9b8bc]" name="shouldTestHashcode" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldTestHashcode -->
        <test-method status="PASS" signature="shouldTestEquals()[pri:0, instance:pl.tomaszdziurko.guava.base.ObjectsTest@2ef9b8bc]" name="shouldTestEquals" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldTestEquals -->
      </class> <!-- pl.tomaszdziurko.guava.base.ObjectsTest -->
      <class name="pl.tomaszdziurko.guava.base.ThrowablesTest">
        <test-method status="PASS" signature="shouldExtractInnermostException()[pri:0, instance:pl.tomaszdziurko.guava.base.ThrowablesTest@246ae04d]" name="shouldExtractInnermostException" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldExtractInnermostException -->
        <test-method status="PASS" signature="shouldGetStackTrace()[pri:0, instance:pl.tomaszdziurko.guava.base.ThrowablesTest@246ae04d]" name="shouldGetStackTrace" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldGetStackTrace -->
        <test-method status="PASS" signature="shouldListAllExceptionsChain()[pri:0, instance:pl.tomaszdziurko.guava.base.ThrowablesTest@246ae04d]" name="shouldListAllExceptionsChain" duration-ms="11" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldListAllExceptionsChain -->
      </class> <!-- pl.tomaszdziurko.guava.base.ThrowablesTest -->
      <class name="pl.tomaszdziurko.guava.collect.BiMapTest">
        <test-method status="PASS" signature="shouldAllowToPutExistingValueWithForcePut()[pri:0, instance:pl.tomaszdziurko.guava.collect.BiMapTest@5d624da6]" name="shouldAllowToPutExistingValueWithForcePut" duration-ms="31" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAllowToPutExistingValueWithForcePut -->
        <test-method status="PASS" signature="shouldInverseBiMap()[pri:0, instance:pl.tomaszdziurko.guava.collect.BiMapTest@5d624da6]" name="shouldInverseBiMap" duration-ms="1" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldInverseBiMap -->
        <test-method status="PASS" signature="shouldNotAllowToPutExistingValue()[pri:0, instance:pl.tomaszdziurko.guava.collect.BiMapTest@5d624da6]" name="shouldNotAllowToPutExistingValue" duration-ms="0" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[value already present: one]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: value already present: one
	at com.google.common.base.Preconditions.checkArgument(Preconditions.java:115)
	at com.google.common.collect.AbstractBiMap.putInBothMaps(AbstractBiMap.java:112)
	at com.google.common.collect.AbstractBiMap.put(AbstractBiMap.java:96)
	at com.google.common.collect.HashBiMap.put(HashBiMap.java:85)
	at pl.tomaszdziurko.guava.collect.BiMapTest.shouldNotAllowToPutExistingValue(BiMapTest.java:45)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:158)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:98)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotAllowToPutExistingValue -->
      </class> <!-- pl.tomaszdziurko.guava.collect.BiMapTest -->
      <class name="pl.tomaszdziurko.guava.primitives.PrimitivesTest">
        <test-method status="PASS" signature="shouldConcatArrays()[pri:0, instance:pl.tomaszdziurko.guava.primitives.PrimitivesTest@4e04a765]" name="shouldConcatArrays" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConcatArrays -->
        <test-method status="PASS" signature="shouldFindIndexOfGivenNumber()[pri:0, instance:pl.tomaszdziurko.guava.primitives.PrimitivesTest@4e04a765]" name="shouldFindIndexOfGivenNumber" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFindIndexOfGivenNumber -->
        <test-method status="PASS" signature="shouldJoinArrayUsingSeparator()[pri:0, instance:pl.tomaszdziurko.guava.primitives.PrimitivesTest@4e04a765]" name="shouldJoinArrayUsingSeparator" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldJoinArrayUsingSeparator -->
        <test-method status="PASS" signature="shouldFindGivenNumberInArray()[pri:0, instance:pl.tomaszdziurko.guava.primitives.PrimitivesTest@4e04a765]" name="shouldFindGivenNumberInArray" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFindGivenNumberInArray -->
        <test-method status="PASS" signature="shouldFindMaxAndMinInArray()[pri:0, instance:pl.tomaszdziurko.guava.primitives.PrimitivesTest@4e04a765]" name="shouldFindMaxAndMinInArray" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFindMaxAndMinInArray -->
      </class> <!-- pl.tomaszdziurko.guava.primitives.PrimitivesTest -->
      <class name="pl.tomaszdziurko.guava.eventbus.EventBusTest">
        <test-method status="PASS" signature="shouldDetectEventWithoutListeners()[pri:0, instance:pl.tomaszdziurko.guava.eventbus.EventBusTest@38082d64]" name="shouldDetectEventWithoutListeners" duration-ms="37" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDetectEventWithoutListeners -->
        <test-method status="PASS" signature="shouldGetEventsFromSubclass()[pri:0, instance:pl.tomaszdziurko.guava.eventbus.EventBusTest@38082d64]" name="shouldGetEventsFromSubclass" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldGetEventsFromSubclass -->
        <test-method status="PASS" signature="shouldNotReceiveEventAfterUnsubscribe()[pri:0, instance:pl.tomaszdziurko.guava.eventbus.EventBusTest@38082d64]" name="shouldNotReceiveEventAfterUnsubscribe" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotReceiveEventAfterUnsubscribe -->
        <test-method status="PASS" signature="shouldReceiveEvent()[pri:0, instance:pl.tomaszdziurko.guava.eventbus.EventBusTest@38082d64]" name="shouldReceiveEvent" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReceiveEvent -->
        <test-method status="PASS" signature="shouldReceiveMultipleEventTypesFromBus()[pri:0, instance:pl.tomaszdziurko.guava.eventbus.EventBusTest@38082d64]" name="shouldReceiveMultipleEventTypesFromBus" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReceiveMultipleEventTypesFromBus -->
        <test-method status="PASS" signature="shouldReceiveMultipleEvents()[pri:0, instance:pl.tomaszdziurko.guava.eventbus.EventBusTest@38082d64]" name="shouldReceiveMultipleEvents" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReceiveMultipleEvents -->
      </class> <!-- pl.tomaszdziurko.guava.eventbus.EventBusTest -->
      <class name="pl.tomaszdziurko.guava.math.IntMathTest">
        <test-method status="PASS" signature="shouldCalculateFactorial()[pri:0, instance:pl.tomaszdziurko.guava.math.IntMathTest@4cb2c100]" name="shouldCalculateFactorial" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCalculateFactorial -->
        <test-method status="PASS" signature="shouldDivideWithRoundingMode()[pri:0, instance:pl.tomaszdziurko.guava.math.IntMathTest@4cb2c100]" name="shouldDivideWithRoundingMode" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDivideWithRoundingMode -->
        <test-method status="PASS" signature="shouldCalculateGreatestCommonDivisor()[pri:0, instance:pl.tomaszdziurko.guava.math.IntMathTest@4cb2c100]" name="shouldCalculateGreatestCommonDivisor" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCalculateGreatestCommonDivisor -->
        <test-method status="PASS" signature="shouldCalculateLogarithms()[pri:0, instance:pl.tomaszdziurko.guava.math.IntMathTest@4cb2c100]" name="shouldCalculateLogarithms" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCalculateLogarithms -->
        <test-method status="PASS" signature="shouldThrowExceptionWhenOverflow()[pri:0, instance:pl.tomaszdziurko.guava.math.IntMathTest@4cb2c100]" name="shouldThrowExceptionWhenOverflow" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <exception class="java.lang.ArithmeticException">
            <message>
              <![CDATA[overflow]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.ArithmeticException: overflow
	at com.google.common.math.MathPreconditions.checkNoOverflow(MathPreconditions.java:88)
	at com.google.common.math.IntMath.checkedAdd(IntMath.java:357)
	at pl.tomaszdziurko.guava.math.IntMathTest.shouldThrowExceptionWhenOverflow(IntMathTest.java:28)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:158)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:98)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.ArithmeticException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowExceptionWhenOverflow -->
      </class> <!-- pl.tomaszdziurko.guava.math.IntMathTest -->
      <class name="pl.tomaszdziurko.guava.base.FunctionsTest">
        <test-method status="PASS" signature="shouldComposeTwoFunctions()[pri:0, instance:pl.tomaszdziurko.guava.base.FunctionsTest@17550481]" name="shouldComposeTwoFunctions" duration-ms="2" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldComposeTwoFunctions -->
        <test-method status="PASS" signature="shouldUseForMapFunction()[pri:0, instance:pl.tomaszdziurko.guava.base.FunctionsTest@17550481]" name="shouldUseForMapFunction" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUseForMapFunction -->
        <test-method status="PASS" signature="shouldPrintCountryWithCapitalCityUpperCase()[pri:0, instance:pl.tomaszdziurko.guava.base.FunctionsTest@17550481]" name="shouldPrintCountryWithCapitalCityUpperCase" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPrintCountryWithCapitalCityUpperCase -->
        <test-method status="PASS" signature="shouldUseForMapFunctionWithDefaultValue()[pri:0, instance:pl.tomaszdziurko.guava.base.FunctionsTest@17550481]" name="shouldUseForMapFunctionWithDefaultValue" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUseForMapFunctionWithDefaultValue -->
        <test-method status="PASS" signature="shouldUseForMapFunctionWithNonExistingKey()[pri:0, instance:pl.tomaszdziurko.guava.base.FunctionsTest@17550481]" name="shouldUseForMapFunctionWithNonExistingKey" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Key 'Belgium' not present in map]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Key 'Belgium' not present in map
	at com.google.common.base.Preconditions.checkArgument(Preconditions.java:115)
	at com.google.common.base.Functions$FunctionForMapNoDefault.apply(Functions.java:110)
	at com.google.common.collect.Iterators$8.next(Iterators.java:812)
	at java.util.AbstractCollection.addAll(AbstractCollection.java:343)
	at java.util.HashSet.<init>(HashSet.java:119)
	at org.fest.assertions.CollectionAssert.actualAsSet(CollectionAssert.java:285)
	at org.fest.assertions.ItemGroupAssert.assertContainsOnly(ItemGroupAssert.java:72)
	at org.fest.assertions.CollectionAssert.containsOnly(CollectionAssert.java:64)
	at pl.tomaszdziurko.guava.base.FunctionsTest.shouldUseForMapFunctionWithNonExistingKey(FunctionsTest.java:122)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:158)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:98)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUseForMapFunctionWithNonExistingKey -->
      </class> <!-- pl.tomaszdziurko.guava.base.FunctionsTest -->
      <class name="pl.tomaszdziurko.guava.collect.ObjectArraysTest">
        <test-method status="PASS" signature="shouldAppendElement()[pri:0, instance:pl.tomaszdziurko.guava.collect.ObjectArraysTest@180bc464]" name="shouldAppendElement" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAppendElement -->
        <test-method status="PASS" signature="shouldPrependElement()[pri:0, instance:pl.tomaszdziurko.guava.collect.ObjectArraysTest@180bc464]" name="shouldPrependElement" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPrependElement -->
        <test-method status="PASS" signature="shouldContactTwoArrays()[pri:0, instance:pl.tomaszdziurko.guava.collect.ObjectArraysTest@180bc464]" name="shouldContactTwoArrays" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldContactTwoArrays -->
      </class> <!-- pl.tomaszdziurko.guava.collect.ObjectArraysTest -->
      <class name="pl.tomaszdziurko.guava.base.CaseFormatTest">
        <test-method status="PASS" signature="shouldConvertToLowerCamel()[pri:0, instance:pl.tomaszdziurko.guava.base.CaseFormatTest@5f2050f6]" name="shouldConvertToLowerCamel" duration-ms="9" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertToLowerCamel -->
        <test-method status="PASS" signature="shouldConvertToLowerHyphen()[pri:0, instance:pl.tomaszdziurko.guava.base.CaseFormatTest@5f2050f6]" name="shouldConvertToLowerHyphen" duration-ms="1" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertToLowerHyphen -->
        <test-method status="PASS" signature="shouldConvertToUpperUnderscore()[pri:0, instance:pl.tomaszdziurko.guava.base.CaseFormatTest@5f2050f6]" name="shouldConvertToUpperUnderscore" duration-ms="0" started-at="2017-05-30T21:41:19Z" finished-at="2017-05-30T21:41:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertToUpperUnderscore -->
      </class> <!-- pl.tomaszdziurko.guava.base.CaseFormatTest -->
      <class name="pl.tomaszdziurko.guava.collect.DiscreteDomainTest">
        <test-method status="PASS" signature="shouldReturnDistance()[pri:0, instance:pl.tomaszdziurko.guava.collect.DiscreteDomainTest@614c5515]" name="shouldReturnDistance" duration-ms="2" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnDistance -->
        <test-method status="PASS" signature="shouldReturnPreviousInt()[pri:0, instance:pl.tomaszdziurko.guava.collect.DiscreteDomainTest@614c5515]" name="shouldReturnPreviousInt" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnPreviousInt -->
        <test-method status="PASS" signature="shouldReturnNextInt()[pri:0, instance:pl.tomaszdziurko.guava.collect.DiscreteDomainTest@614c5515]" name="shouldReturnNextInt" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnNextInt -->
        <test-method status="PASS" signature="shouldReturnMaxAndMinInt()[pri:0, instance:pl.tomaszdziurko.guava.collect.DiscreteDomainTest@614c5515]" name="shouldReturnMaxAndMinInt" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnMaxAndMinInt -->
      </class> <!-- pl.tomaszdziurko.guava.collect.DiscreteDomainTest -->
      <class name="pl.tomaszdziurko.guava.base.PredicateTest">
        <test-method status="PASS" signature="shouldCheckPattern()[pri:0, instance:pl.tomaszdziurko.guava.base.PredicateTest@60addb54]" name="shouldCheckPattern" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCheckPattern -->
        <test-method status="PASS" signature="shouldComposeTwoPredicates()[pri:0, instance:pl.tomaszdziurko.guava.base.PredicateTest@60addb54]" name="shouldComposeTwoPredicates" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldComposeTwoPredicates -->
        <test-method status="PASS" signature="shouldFindObjectInCollection()[pri:0, instance:pl.tomaszdziurko.guava.base.PredicateTest@60addb54]" name="shouldFindObjectInCollection" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFindObjectInCollection -->
        <test-method status="PASS" signature="shouldUseCustomPredicate()[pri:0, instance:pl.tomaszdziurko.guava.base.PredicateTest@60addb54]" name="shouldUseCustomPredicate" duration-ms="2" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUseCustomPredicate -->
      </class> <!-- pl.tomaszdziurko.guava.base.PredicateTest -->
      <class name="pl.tomaszdziurko.guava.collect.MultisetTest">
        <test-method status="PASS" signature="shouldAddElementTwoTimes()[pri:0, instance:pl.tomaszdziurko.guava.collect.MultisetTest@5315b42e]" name="shouldAddElementTwoTimes" duration-ms="2" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldAddElementTwoTimes -->
        <test-method status="PASS" signature="shouldRetainOnlySelectedKeys()[pri:0, instance:pl.tomaszdziurko.guava.collect.MultisetTest@5315b42e]" name="shouldRetainOnlySelectedKeys" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRetainOnlySelectedKeys -->
        <test-method status="PASS" signature="shouldUserCustomAddRemoveAndSetCount()[pri:0, instance:pl.tomaszdziurko.guava.collect.MultisetTest@5315b42e]" name="shouldUserCustomAddRemoveAndSetCount" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldUserCustomAddRemoveAndSetCount -->
      </class> <!-- pl.tomaszdziurko.guava.collect.MultisetTest -->
      <class name="pl.tomaszdziurko.guava.collect.IterablesTest">
        <test-method status="PASS" signature="shouldCheckIfAtLeastOneElementIsEmptyOrNull()[pri:0, instance:pl.tomaszdziurko.guava.collect.IterablesTest@64616ca2]" name="shouldCheckIfAtLeastOneElementIsEmptyOrNull" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCheckIfAtLeastOneElementIsEmptyOrNull -->
        <test-method status="PASS" signature="shouldCheckLengthOfAllElements()[pri:0, instance:pl.tomaszdziurko.guava.collect.IterablesTest@64616ca2]" name="shouldCheckLengthOfAllElements" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCheckLengthOfAllElements -->
        <test-method status="PASS" signature="shouldConcat()[pri:0, instance:pl.tomaszdziurko.guava.collect.IterablesTest@64616ca2]" name="shouldConcat" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConcat -->
        <test-method status="PASS" signature="shouldConvertToArray()[pri:0, instance:pl.tomaszdziurko.guava.collect.IterablesTest@64616ca2]" name="shouldConvertToArray" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldConvertToArray -->
        <test-method status="PASS" signature="shouldCycleOverIterable()[pri:0, instance:pl.tomaszdziurko.guava.collect.IterablesTest@64616ca2]" name="shouldCycleOverIterable" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCycleOverIterable -->
        <test-method status="PASS" signature="shouldCountElementsInIterable()[pri:0, instance:pl.tomaszdziurko.guava.collect.IterablesTest@64616ca2]" name="shouldCountElementsInIterable" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCountElementsInIterable -->
        <test-method status="PASS" signature="shouldFilterOnlyLongs()[pri:0, instance:pl.tomaszdziurko.guava.collect.IterablesTest@64616ca2]" name="shouldFilterOnlyLongs" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFilterOnlyLongs -->
        <test-method status="PASS" signature="shouldPartition()[pri:0, instance:pl.tomaszdziurko.guava.collect.IterablesTest@64616ca2]" name="shouldPartition" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldPartition -->
        <test-method status="PASS" signature="shouldFilterOutSomeNumbers()[pri:0, instance:pl.tomaszdziurko.guava.collect.IterablesTest@64616ca2]" name="shouldFilterOutSomeNumbers" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldFilterOutSomeNumbers -->
        <test-method status="PASS" signature="shouldGetFirstAndLast()[pri:0, instance:pl.tomaszdziurko.guava.collect.IterablesTest@64616ca2]" name="shouldGetFirstAndLast" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldGetFirstAndLast -->
        <test-method status="PASS" signature="shouldRemoveNegativeNumbers()[pri:0, instance:pl.tomaszdziurko.guava.collect.IterablesTest@64616ca2]" name="shouldRemoveNegativeNumbers" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldRemoveNegativeNumbers -->
        <test-method status="PASS" signature="shouldReturnSelectedElementWithDefValue()[pri:0, instance:pl.tomaszdziurko.guava.collect.IterablesTest@64616ca2]" name="shouldReturnSelectedElementWithDefValue" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnSelectedElementWithDefValue -->
      </class> <!-- pl.tomaszdziurko.guava.collect.IterablesTest -->
      <class name="pl.tomaszdziurko.guava.collect.OrderingTest">
        <test-method status="PASS" signature="testOrdering()[pri:0, instance:pl.tomaszdziurko.guava.collect.OrderingTest@dfd3711]" name="testOrdering" duration-ms="2" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrdering -->
      </class> <!-- pl.tomaszdziurko.guava.collect.OrderingTest -->
      <class name="pl.tomaszdziurko.guava.collect.MultimapTest">
        <test-method status="PASS" signature="partitionTest()[pri:0, instance:pl.tomaszdziurko.guava.collect.MultimapTest@1324409e]" name="partitionTest" duration-ms="3" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- partitionTest -->
        <test-method status="PASS" signature="multiKeyTest()[pri:0, instance:pl.tomaszdziurko.guava.collect.MultimapTest@1324409e]" name="multiKeyTest" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multiKeyTest -->
        <test-method status="PASS" signature="shouldTestHowMultimapWorks()[pri:0, instance:pl.tomaszdziurko.guava.collect.MultimapTest@1324409e]" name="shouldTestHowMultimapWorks" duration-ms="8" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldTestHowMultimapWorks -->
      </class> <!-- pl.tomaszdziurko.guava.collect.MultimapTest -->
      <class name="pl.tomaszdziurko.guava.base.PreconditionsTest">
        <test-method status="PASS" signature="shouldNotAcceptNotFullFootballTeam()[pri:0, instance:pl.tomaszdziurko.guava.base.PreconditionsTest@6fb554cc]" name="shouldNotAcceptNotFullFootballTeam" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Full team should consist of 11 players]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Full team should consist of 11 players
	at com.google.common.base.Preconditions.checkArgument(Preconditions.java:88)
	at pl.tomaszdziurko.guava.PreconditionsLesson.displayFootballTeamMembers(PreconditionsLesson.java:28)
	at pl.tomaszdziurko.guava.base.PreconditionsTest.shouldNotAcceptNotFullFootballTeam(PreconditionsTest.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:158)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:98)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotAcceptNotFullFootballTeam -->
        <test-method status="PASS" signature="shouldThrowIllegalState()[pri:0, instance:pl.tomaszdziurko.guava.base.PreconditionsTest@6fb554cc]" name="shouldThrowIllegalState" duration-ms="1" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Weather is not the best for a sunbath]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Weather is not the best for a sunbath
	at com.google.common.base.Preconditions.checkState(Preconditions.java:145)
	at pl.tomaszdziurko.guava.PreconditionsLesson.getSomeSuntan(PreconditionsLesson.java:21)
	at pl.tomaszdziurko.guava.base.PreconditionsTest.shouldThrowIllegalState(PreconditionsTest.java:16)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:158)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:98)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldThrowIllegalState -->
        <test-method status="PASS" signature="shouldNotAcceptNullFootballTeam()[pri:0, instance:pl.tomaszdziurko.guava.base.PreconditionsTest@6fb554cc]" name="shouldNotAcceptNullFootballTeam" duration-ms="0" started-at="2017-05-30T21:41:20Z" finished-at="2017-05-30T21:41:20Z">
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Team can not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Team can not be null
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:204)
	at pl.tomaszdziurko.guava.PreconditionsLesson.displayFootballTeamMembers(PreconditionsLesson.java:27)
	at pl.tomaszdziurko.guava.base.PreconditionsTest.shouldNotAcceptNullFootballTeam(PreconditionsTest.java:24)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:70)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:158)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:98)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcessWhenForked(SurefireStarter.java:107)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotAcceptNullFootballTeam -->
      </class> <!-- pl.tomaszdziurko.guava.base.PreconditionsTest -->
    </test> <!-- Command line test -->
  </suite> <!-- Command line suite -->
</testng-results>
